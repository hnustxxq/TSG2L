					ETTh2

	ours
	（后三个预测长度表现非常好）
	self.size_dict={'size_0':160,
                        'size_1':151,
                        'size_2':300,
                        'text_size':291}
        	self.epoch_dict={'epoch_0':1,
                         'epoch_1':2,
                         'epoch_2':3,
                         'text_epoch':23（28略微有区别}
        	self.a_3 = 200
        	self.c = 10
	lidu=0.5
	  24 {'norm': {'MSE': 0.6587454401893662, 'MAE': 0.6304397945852388}}
 	48 {'norm': {'MSE': 0.8555290183534293, 'MAE': 0.724917112394919}}
 	168 {'norm': {'MSE': 1.5882613754960357, 'MAE': 0.9754504974326831}}
 	336 {'norm': {'MSE': 1.8788935116722172, 'MAE': 1.0623770425619141}}
 	720 {'norm': {'MSE': 2.0531777210151634, 'MAE': 1.1188444534641115}}
	TS-TCC
	 24 {'norm': {'MSE': 0.858265, 'MAE': 0.7654576}}
 	48 {'norm': {'MSE': 1.084403, 'MAE': 0.8565743}}
 	168 {'norm': {'MSE': 1.8008094, 'MAE': 1.0975361}}
 	336 {'norm': {'MSE': 2.1816647, 'MAE': 1.2020073}}
 	720 {'norm': {'MSE': 1.9297781, 'MAE': 1.1786892}}
	最好的实验效果
	24 {'norm': {'MSE': 0.3929322345695289, 'MAE': 0.46354746469230185}}
        	48 {'norm': {'MSE': 0.5663602638381023, 'MAE': 0.5742156430166436}}
        	168 {'norm': {'MSE': 1.836124387757178, 'MAE': 1.060419379785206}}
        	336 {'norm': {'MSE': 2.230069955041867, 'MAE': 1.1953936384225796}}
        	720 {'norm': {'MSE': 2.67475828263016, 'MAE':1.2947455644607544}}
	不做任何表征的结果
	24 {'norm': {'MSE': 0.44630338237057343, 'MAE': 0.4905708280245158}}
 	48 {'norm': {'MSE': 0.5907076983501652, 'MAE': 0.5847156506065515}}
 	168 {'norm': {'MSE': 1.7316511314884708, 'MAE': 1.0179350275065941}}
 	336 {'norm': {'MSE': 2.1688659507615156, 'MAE': 1.1606112306075929}}
 	720 {'norm': {'MSE': 2.3979183411054494, 'MAE': 1.2467314565032108}}

				airquality
	ours
	self.size_dict={'size_0':100,
                        'size_1':200,
                        'size_2':300,
                        'text_size':300}
        self.epoch_dict={'epoch_0':1,
                         'epoch_1':1,
                         'epoch_2':1,
                         'text_epoch':10}
        self.a_3 = 1000
        self.c = 10
	lidu=0.5
	 24 {'norm': {'MSE': 0.9348579768654108, 'MAE': 0.6293482487305009}}
 	48 {'norm': {'MSE': 1.197386094194331, 'MAE': 0.6883153438941532}}
 	96 {'norm': {'MSE': 1.3864355616190465, 'MAE': 0.7311741391824911}}
 	288 {'norm': {'MSE': 1.5685488501701101, 'MAE': 0.7791562538572857}}
 	672 {'norm': {'MSE': 1.6803802474856118, 'MAE': 0.8008585649337886}}
	mask_ratio=0.6
	  24 {'norm': {'MSE': 0.8995846348748473, 'MAE': 0.6125018616376733}}
 	48 {'norm': {'MSE': 1.162749861037816, 'MAE': 0.671333231401383}}
 	96 {'norm': {'MSE': 1.3465325219755577, 'MAE': 0.7148299467091256}}
 	288 {'norm': {'MSE': 1.5632037276359394, 'MAE': 0.7755327518102159}}
 	672 {'norm': {'MSE': 1.675839669568918, 'MAE': 0.797944937220927}}
	最好的实验效果
	24:mse:0.9232845306396484, mae:0.6385116577148438
	48:mse:1.248332142829895, mae:0.6787309646606445
	96:mse:1.453442096710205, mae: 0.7740147979442271
	288:mse:1.6019829511642456, mae:0.7050379514694214
	672:mse:1.8488552570343018, mae:0.8510746955871582
	不做任何表征（输入数据带日期格式）
	24 {'norm': {'MSE': 0.9944635951308851, 'MAE': 0.6546759802004962}}
 	48 {'norm': {'MSE': 1.2368469281775327, 'MAE': 0.7051322092202567}}
 	96 {'norm': {'MSE': 1.4309512604253238, 'MAE': 0.7511559593549452}}
 	288 {'norm': {'MSE': 1.6530966302632846, 'MAE': 0.8082046133593286}}
 	672 {'norm': {'MSE': 1.7893148749659802, 'MAE': 0.8406365024521214}}





				weather
	ours
	self.size_dict={'size_0':100,
			'size_1':200,
			'size_2':300,
			'text_size':300}
        self.epoch_dict={'epoch_0':200,
			'epoch_1':200,
			'epoch_2':200,
			'text_epoch':1200}
        self.a_3 = 1000
        self.c = 10


	 24 {'norm': {'MSE': 0.40027730466890127, 'MAE': 0.3301277567748}}
 	48 {'norm': {'MSE': 0.4683837877312014, 'MAE': 0.3704206749299877}}
 	96 {'norm': {'MSE': 0.514933641729902, 'MAE': 0.3966150124346939}}
 	288 {'norm': {'MSE': 0.5526418273238148, 'MAE': 0.417709100570106}}
 	672 {'norm': {'MSE': 0.5548065475125401, 'MAE': 0.4219055054598535}}



	最好的实验效果
	24 {'norm': {'MSE': 0.40416881032268087, 'MAE':0.32551315426826477}}
         	48 {'norm': {'MSE': 0.4735996518520653, 'MAE': 0.37421440579954734}}
         	96 {'norm': {'MSE': 0.5194620159583979, 'MAE': 0.40142967896096327}}
         	288{'norm': {'MSE':0.5492175221443176, 'MAE': 0.41570839285850525
         	672{'norm': {'MSE':0.5544989109039307, 'MAE': 0.4149308204650879
	不做任何表征的实验结果
	 24 {'norm': {'MSE': 0.4187760665187214, 'MAE': 0.3397571806174234}}
 	48 {'norm': {'MSE': 0.4850863280544294, 'MAE': 0.3819400756743072}}
 	96 {'norm': {'MSE': 0.5299235584927303, 'MAE': 0.4102215699649441}}
 	288 {'norm': {'MSE': 0.5682216392396704, 'MAE': 0.43265267744256897}}
 	672 {'norm': {'MSE': 0.5728541246992392, 'MAE': 0.4391961208355423}}






					ETTh1
	our_model（第二阶段只有一个模型在训练）
	self.time2vec_size_1 = 100
        self.time2vec_size_2 = 200
        self.time2vec_size_3 = 300
        self.time2vec_size_4 = 200

        self.epoch_1 = 100
        self.epoch_2 = 200
        self.epoch_3 = 300
        self.epoch_4 = 800
        self.a_3 = 1000
 	 24 {'norm': {'MSE': 0.8896671993157151, 'MAE': 0.6659114221513338}}
 	48 {'norm': {'MSE': 0.9270090925622595, 'MAE': 0.6933767543202046}}
 	168 {'norm': {'MSE': 0.9922240404000728, 'MAE': 0.7490014555853223}}
 	336 {'norm': {'MSE': 1.0779671544769056, 'MAE': 0.8009514856658606}}
 	720 {'norm': {'MSE': 1.1636693838519152, 'MAE': 0.8583326303225964}}

	（带有上下文和sin模块的）
	 self.time2vec_size = 200
        self.fina_size = 200
        self.c = 100  # 第二次拟合滑动窗口的大小

        self.epoch_1 = 200
        self.epoch_2 = 200

        self.a_3 = 1000
	 24 {'norm': {'MSE': 0.4410816450665312, 'MAE': 0.46643879767760255}}
 	48 {'norm': {'MSE': 0.4919061164631585, 'MAE': 0.49909640619635537}}
 	168 {'norm': {'MSE': 0.686524034957395, 'MAE': 0.6089010100356055}}
 	336 {'norm': {'MSE': 0.9068315846389038, 'MAE': 0.7135004701896509}}
 	720 {'norm': {'MSE': 1.068921994289952, 'MAE': 0.8010116524085042}}





##########################################################################




			Tetuan_City_power_consumption

	ours
	# time2vec
        self.tran =1  # 除了Tetuan_City_power_consumption，这里都是1
        self.num = 70
        self.time2vec_size = 280
        self.c = 220  # 滑动窗口总大小
        # 上下文
        self.a = 800
        self.b = 600
        # 关于原始数据的映射
        self.a_1 = 200
        self.a_2 = 300
        self.a_3 = 150
         24 {'norm': {'MSE': 0.48575309328420285, 'MAE': 0.5321719614135609}}
         48 {'norm': {'MSE': 0.7394247488485286, 'MAE': 0.6619092603071691}}
         96 {'norm': {'MSE': 0.7161457959124781, 'MAE': 0.643103148717064}}
         288 {'norm': {'MSE': 0.9679211780795087, 'MAE': 0.7781416585987317}}
         672 {'norm': {'MSE': 1.1561764337396008, 'MAE': 0.8242904472985169}}


				ETTm2

	ours
	 self.time2vec_size = 90
        self.c = 30  # 滑动窗口总大小  要取用偶数

        # 关于原始数据的映射
        self.a_1 = 50
        self.a_2 = 100
        self.a_3 = 50
        # 上下文
        self.a = 40
        self.b = 20
        self.tt = 10  # 上下文中关于自己的个数
	24 {'norm': {'MSE': 0.14931664783128873, 'MAE': 0.2619859714339983}}
         48 {'norm': {'MSE': 0.21061213131417228, 'MAE': 0.320885037601995}}
         96 {'norm': {'MSE': 0.3038855101168634, 'MAE': 0.39829130061736995}}
         288 {'norm': {'MSE': 0.7112433712326499, 'MAE': 0.6364962790740808}}
         672 {'norm': {'MSE': 1.9659518817320132, 'MAE': 1.0778468668171064}}


	pyraformer
	24：mse:0.236612468957901, mae:0.3727644383907318
         48：mse:0.5453639626502991, mae:0.5859483480453491
         96：mse:0.5615063905715942, mae:0.6011979579925537,
          288：mse:1.3814351558685303, mae:0.9288663268089294
          672：mse:5.677509784698486, mae:1.824688196182251
	reformer
	24：mse:0.24570943415164948, mae:0.3531562387943268
	48：mse:0.48949798941612244, mae:0.5202297568321228
	96：mse:0.7806488871574402, mae:0.6680285334587097
	288：mse:1.67998468875885, mae:0.9930663108825684
	672：mse:2.8635799884796143, mae:1.282888650894165

        informer
	24：mse:0.16502973437309265, mae:0.29235172271728516
        48：mse:0.24202598631381989, mae:0.3610171377658844
       	96：mse:0.5680071711540222, mae:0.5743505358695984
        288：mse:2.1486141681671143, mae:1.1946473121643066
        672：mse:6.547488212585449, mae:2.2892165184020996

	ts2vec
	{24: {'norm': {'MSE': 0.1789398376110187, 'MAE': 0.29591958131635104}
	48: {'norm': {'MSE': 0.24433920514007096, 'MAE': 0.35385538166100183}
	96: {'norm': {'MSE': 0.34290084153239214, 'MAE': 0.4199160190148902}
	288: {'norm': {'MSE': 0.7178027537868035, 'MAE': 0.6373370127927331}
	672: {'norm': {'MSE': 1.8110744082974561, 'MAE': 1.025212653439804}


			energydata_complete
	（第二次拟合直接接着用第一次拟合的线性层）

	self.time2vec_size = 20
        self.fina_size = 200

        self.epoch_1 = 10
        self.epoch_2 = 100

        self.a_3 = 1000

	24 {'norm': {'MSE': 0.4211902734490515, 'MAE': 0.4397536612878218}}
        48 {'norm': {'MSE': 0.660232787795655, 'MAE': 0.5777399629213601}}
        96 {'norm': {'MSE': 0.9280831215416645, 'MAE': 0.6983360839005609}}
        288 {'norm': {'MSE': 1.527419586743045, 'MAE': 0.9476676067558623}}
        672 {'norm': {'MSE': 1.962583027138117, 'MAE': 1.0859689771860888}}



			SMAP

	our_model  （上下文版本的）
	self.size_dict = {'size_0': 100,
                          'size_1': 200,
                          'size_2': 400,
                          'size_3': 500,
                          'text_size': 300}
        	self.epoch_dict = {'epoch_0': 1,
                           'epoch_1': 1,
                           'epoch_2': 1,
                           'epoch_3': 1,
                           'text_epoch': 80}
        	self.a_3 = 150
       	 self.c = 8
	Anomaly detection AUC:  0.6367560592922913
	Anomaly detection AUPRC:  0.019289908681106794

	TST B=16最好  跑过  8   16   32  40  64
	Anomaly detection AUC:  0.537652586812007
	Anomaly detection AUPRC:  0.014944373100917918
	TS-TCC
	Anomaly detection AUC:  0.4025762417936332
	Anomaly detection AUPRC:  0.011998030921987939

	TNC
	Anomaly detection AUC:  0.5630716379701887
	Anomaly detection AUPRC:  0.01582182582627388
	ts2vec
	B=8
	Anomaly detection AUC:  0.4012716875180643
	Anomaly detection AUPRC:  0.010494415613395059
	原始数据做表征（原始数据加上序列号，要不然异常分数全部都是无穷大）
	Anomaly detection AUC:  0.45434380032206123
	Anomaly detection AUPRC:  0.012263524108370477


			SMD

	our_model
	self.size_dict = {'size_0': 100,  'size_1': 200, 'size_2': 400, 'text_size': 300}
        	self.epoch_dict = {'epoch_0': 200,   'epoch_1': 200, 'epoch_2': 200, 'text_epoch': 800}
        self.a_3 = 300
	self.c = 10 lidu=0.5
	Anomaly detection AUC:  0.9196122668764997
	Anomaly detection AUPRC:  0.5967412765160042
	TST  32最好  跑过64，32，24，16
	Anomaly detection AUC:  0.6239488811525954
	Anomaly detection AUPRC:  0.15925780448554727
	ts2vec
	B=16
	Anomaly detection AUC:  0.6926741446997824
	Anomaly detection AUPRC:  0.3550226018553381
	TS-TCC
	Anomaly detection AUC:  0.812528361490764
	Anomaly detection AUPRC:  0.34496715722431914
	原始数据做表征（原始数据没有加序列号）
	Anomaly detection AUC:  0.8495911525824809
	Anomaly detection AUPRC:  0.4433271035212516
	TNC
	Anomaly detection AUC:  0.708122532292979
	Anomaly detection AUPRC:  0.3540824494355751

	Anomaly_Detection_Falling_People

	our_model
	self.size_dict = {'size_0': 100,
                          'size_1': 120,
                          'size_2': 180,
                          'size_3': 230,
                          'size_4': 500,
                          'size_5': 250,
                          'text_size': 300}
        self.epoch_dict = {'epoch_0': 3,
                           'epoch_1': 2,
                           'epoch_2': 4,
                           'epoch_3': 1,
                           'epoch_4': 1,
                           'epoch_5': 1,
                           'text_epoch':2 }
        self.a_3 = 680
        self.c = 5
	Anomaly detection AUC:  0.7506313717479712
	Anomaly detection AUPRC:  0.23662597262212054


	TS-TCC   epoch=1000
	Anomaly detection AUC:  0.7528653135503519
	Anomaly detection AUPRC:  0.3265384319371085

	#不做任何表征
	Anomaly detection AUC:  0.7392225771109172
	Anomaly detection AUPRC:  0.2927160672817171

	TST
	epoch=1
	Anomaly detection AUC:  0.7125870457373122
	Anomaly detection AUPRC:  0.29015000616017944
	TNC
	Anomaly detection AUC:  0.4115406399138364
	Anomaly detection AUPRC:  0.03988154175871393
	ts2vec
	B=16  epoch=1
	Anomaly detection AUC:  0.5861529962303393
	Anomaly detection AUPRC:  0.06514920374023843


	自己的模型使用的是scikit-learn==1.0.2,但下面记录的ts2vec的第一次实验结果并不是这个版本，也不是作者提供的版本

			Chinatown
	our_model

	self.size_dict = {'size_0': 1,
                          'size_1': 3,
                          'size_2': 2,
                          'text_size': 18}
        self.epoch_dict = {'epoch_0': 80,
                           'epoch_1': 60,
                           'epoch_2': 40,
                           'text_epoch': 80}
        self.a_3 = 100
        self.c = 3
	{'acc': 0.9883381924198251, 'auprc': 0.9987744013449199}
	TNC
	{'acc': 0.9533527696793003, 'auprc': 0.9950249041783262}
	TST  B=10  mask_ratio=0.5
	{'acc': 0.9125364431486881, 'auprc': 0.9922858532037809}
		ts2vec
		scikit-learn==1.0.2
	{'acc': 0.9795918367346939, 'auprc': 0.9987489846944924}
	原始数据做表征
	{'acc': 0.9650145772594753, 'auprc': 0.9983737679459362}


			ItalyPowerDemand
		our_model

	 self.size_dict = {'size_0': 1,
                          'size_1': 12,
                          'text_size': 60}
        	self.epoch_dict = {'epoch_0': 500,
                           'epoch_1': 300,
                           'text_epoch': 8000}
        	self.a_3 = 300
        	self.c = 3
	{'acc': 0.9698736637512148, 'auprc': 0.9919971581882924}
	TNC
	{'acc': 0.9698736637512148, 'auprc': 0.991820253625337}
	TST  B=40
	{'acc': 0.9689018464528668, 'auprc': 0.9909733183334755}
		ts2vec  batchsize=1
	 {'acc': 0.9630709426627794, 'auprc': 0.9838964296401317}
	scikit-learn==1.0.2
	{'acc': 0.9620991253644315, 'auprc': 0.9853922481561195}



			RacketSports
		our_model
	self.size_dict = {'size_0': 3,
                          'size_1': 50,
                          'text_size': 60}
        self.epoch_dict = {'epoch_0': 10,
                           'epoch_1': 10,
                           'text_epoch': 20}
        self.a_3 = 500
        self.c = 5
	{'acc': 0.8947368421052632, 'auprc': 0.9259606833040457}

	TST  B=100
	{'acc': 0.8223684210526315, 'auprc': 0.8768484732621596}
	TNC
	{'acc': 0.7171052631578947, 'auprc': 0.7769967033658838}
		ts2vec
	B=3
	{'acc': 0.881578947368421, 'auprc': 0.9012953220008241}


######################################################

		DistalPhalanxOutlineCorrect   #新模型未调试参数
	our_model
	 self.size_dict = {'size_0': 100,
                          'size_1': 300,
                          'text_size': 200}
        self.epoch_dict = {'epoch_0': 200,
                           'epoch_1': 200,
                           'text_epoch': 300}
        self.a_3 = 100
        self.c = 5
	{'acc': 0.6847826086956522, 'auprc': 0.7481050063153318}

	ts2vec
	{'acc': 0.782608695652174, 'auprc': 0.8824493962627182}
##############################################################################
	DistalPhalanxOutlineAgeGroup
	self.time2vec_size = 16
        self.c = 2  # 滑动窗口总大小  要取用偶数

        # 关于原始数据的映射
        self.a_1 = 900
        self.a_2 = 600
        self.a_3 = 480
        # 上下文
        self.a = 400
        self.b = 200
        self.tt = 11
	{'acc': 0.7338129496402878, 'auprc': 0.7228289864163852}

	ArrowHead
		our_model
	self.time2vec_size = 16
        self.c = 4  # 滑动窗口总大小  要取用偶数

        # 关于原始数据的映射
        self.a_1 = 900
        self.a_2 = 600
        self.a_3 = 480
        # 上下文
        self.a = 400
        self.b = 200
        self.tt = 11  # 上下文中关于自己的个数

	{'acc': 0.8171428571428572, 'auprc': 0.7839441252952648}

	self.size_dict = {'size_0': 1,
                          'size_1': 3,
                          'text_size': 6}
        self.epoch_dict = {'epoch_0': 20,
                           'epoch_1': 20,
                           'text_epoch': 30}
	self.a_3 = 100
        self.c = 5
	{'acc': 0.7028571428571428, 'auprc': 0.6475918989956853}
	Ts2vec
	B=18
	 {'acc': 0.8114285714285714, 'auprc': 0.8300510756659071}



	Libras
	（数据集表征做了补全处理）
	our_model
	 self.time2vec_size = 5
        self.fina_size = 5
        self.c = 1  # 第二次拟合滑动窗口的大小

        self.epoch_1 = 500
        self.epoch_2 = 500

        self.a_3 = 1000

	{'acc': 0.8055555555555556, 'auprc': 0.8225591567452889}


		ts2vec
	B=1
	{'acc': 0.8388888888888889, 'auprc': 0.8606366866948537}


